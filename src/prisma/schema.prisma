generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id       String  @id @default(uuid())
  email    String  @unique
  password String
  name     String
  role     Role    @default(member)

  news News[]

  memberProfile MemberProfile?
  workExperience WorkExperience[]
  headOfDepartments   Department[]
  departmentMemberships DepartmentMember[]
  contacts Contact[]
  isActive Boolean @default(true)
  createdAt DateTime @default(now())

  @@map("users")
}

model MemberProfile {
  id          String  @id @default(uuid())
  imageURL    String?
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String  @unique
  position    String?
  description String?

  skills      MemberProfileSkill[]
  certificates Certificate[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("member_profiles")
}

model Skill {
  id   String @id @default(uuid())
  name String @unique

  profiles MemberProfileSkill[]

  @@map("skills")
}

model MemberProfileSkill {
  profileId String
  skillId   String

  profile MemberProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  skill   Skill         @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@id([profileId, skillId])


  @@map("member_profile_skills")
}

model Certificate {
  id              String  @id @default(uuid())
  memberProfile   MemberProfile @relation(fields: [memberProfileId], references: [id], onDelete: Cascade)
  memberProfileId String

  name           String
  organization   String?
  issueDate      DateTime
  expirationDate DateTime?
  certificateURL String?

  createdAt DateTime @default(now())

  @@map("certificates")
}


model Contact {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  type   ContactType
  value  String

  createdAt DateTime @default(now())

  @@map("contacts")
}

enum ContactType {
  PHONE
  TELEGRAM
  LINKEDIN
  GITHUB
  OTHER
}




model Department {
  id String @id @default(uuid())
  name String?
  headId String?
  head      User?      @relation(fields: [headId], references: [id], onDelete: SetNull)
  parentDepartmentId String?
  parentDepartment   Department? @relation("DepartmentHierarchy", fields: [parentDepartmentId], references: [id], onDelete: SetNull)
  subDepartments     Department[] @relation("DepartmentHierarchy")
  isActive  Boolean @default(true)
  members DepartmentMember[]

  projects Projects[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("departments")
}

model DepartmentMember {
  id String @id @default(uuid())
  userId String
  departmentId String
  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)


  role         MemberRole @default(member)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, departmentId])
  @@map("department_members")
}


model WorkExperience {
  id String @id @default(uuid())
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  company String
  position String
  startDate DateTime?
  endDate DateTime?
  description String?


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("work_experience")
}

model Tags {
  id   String @id @default(uuid())
  name String @unique()
  news NewsTags[]
}

model News {
  id        String     @id @default(uuid())
  title     String
  content   String
  imageURL  String?
  authorId  String
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  tags      NewsTags[]
  isActive  Boolean @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("news")
}

model NewsTags {
  newsId String
  tagId  String

  news News @relation(fields: [newsId], references: [id], onDelete: Cascade)
  tag  Tags @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([newsId, tagId])
}


model Projects {
  id          String    @id @default(uuid())
  title       String
  description String
  images      ProjectImage[]

  departmentId String
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  isActive  Boolean @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("projects")
}

model ProjectImage {
  id        String  @id @default(uuid())
  imageUrl  String
  projectId String
  project   Projects @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("project_images")
}


model Requests {
  id         String    @id @default(uuid())
  name       String
  email      String
  message    String
  direction  Direction @relation(fields: [directionId], references: [id])

  directionId String
  isActive  Boolean @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("requests")
}

model Direction {
  id   String @id @default(uuid())
  name String @unique

  requests Requests[]
  isActive  Boolean @default(true)
  @@map("directions")
}


enum Role {
  member
  manager
  admin
}

enum MemberRole {
  member
  head
}
